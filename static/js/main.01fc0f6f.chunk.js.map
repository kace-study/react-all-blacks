{"version":3,"sources":["components/Panel/Panel.js","components/PanelList/PanelList.js","App.js","serviceWorker.js","index.js"],"names":["Panel","_ref","isBlack","onClick","react_default","a","createElement","className","concat","PanelList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","panelColors","initializePanelColors","isPlaying","setState","i","push","Math","random","slice","every","endGame","_this2","components_Panel_Panel","handleClick","renderPanel","Component","App","startGame","components_PanelList_PanelList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAWeA,SARD,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,QAASC,EAAeF,EAAfE,QACxB,OACEC,EAAAC,EAAAC,cAAA,UACEC,UAAS,QAAAC,OAAWN,EAAU,WAAa,YAC3CC,QAAS,kBAAMA,SC0DNM,cA3Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,YAAaR,EAAKS,yBAFhBT,yFAKOD,GACpBA,EAAMW,WACRP,KAAKQ,SAAS,CAAEH,YAAaL,KAAKM,0EAMpC,IADA,IAAID,EAAc,GACTI,EAAI,EAAGA,EAAI,EAAGA,IACrBJ,EAAYK,KAAKC,KAAKC,UAAY,IAEpC,OAAOP,sCAGGI,GACV,GAAIT,KAAKJ,MAAMW,UAAW,CACxB,IAAMF,EAAcL,KAAKI,MAAMC,YAAYQ,QAC3CR,EAAYI,IAAMT,KAAKI,MAAMC,YAAYI,GACzCT,KAAKQ,SAAS,CAACH,YAAaA,IACxBA,EAAYS,MAAM,SAAA1B,GAAO,OAAIA,KAC/BY,KAAKJ,MAAMmB,+CAKLN,GAAG,IAAAO,EAAAhB,KACb,OAAOV,EAAAC,EAAAC,cAACyB,EAAD,CACL7B,QAASY,KAAKI,MAAMC,YAAYI,GAChCpB,QAAS,kBAAM2B,EAAKE,YAAYT,uCAIlC,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,WACGQ,KAAKmB,YAAY,GACjBnB,KAAKmB,YAAY,GACjBnB,KAAKmB,YAAY,IAEpB7B,EAAAC,EAAAC,cAAA,WACGQ,KAAKmB,YAAY,GACjBnB,KAAKmB,YAAY,GACjBnB,KAAKmB,YAAY,IAEpB7B,EAAAC,EAAAC,cAAA,WACGQ,KAAKmB,YAAY,GACjBnB,KAAKmB,YAAY,GACjBnB,KAAKmB,YAAY,YAtDJC,aCiCTC,qBA/Bb,SAAAA,EAAYzB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IACjBxB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KAAMJ,KAIRmB,QAAU,WACRlB,EAAKW,SAAS,CAAED,WAAW,KANVV,EASnByB,UAAY,WACVzB,EAAKW,SAAS,CAAED,WAAW,KAR3BV,EAAKO,MAAQ,CAAEG,WAAW,GAFTV,wEAaV,IAAAmB,EAAAhB,KACDO,EAAYP,KAAKI,MAAMG,UAC7B,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdc,EACAjB,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,6BAEFF,EAAAC,EAAAC,cAAA,UAAQH,QAAS,kBAAM2B,EAAKM,cAA5B,UAEFhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAWhB,UAAWA,EAAWQ,QAASf,KAAKe,kBA3BrCK,cCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.01fc0f6f.chunk.js","sourcesContent":["import React from 'react';\nimport './Panel.css';\n\nconst Panel = ({ isBlack, onClick }) =>  {\n  return (\n    <button \n      className={`card ${ isBlack ? 'bg-black' : 'bg-white' }`} \n      onClick={() => onClick()} />\n  );\n}\n\nexport default Panel;\n","import React, { Component } from 'react';\nimport Panel from '../Panel/Panel';\n\n\nclass PanelList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { panelColors: this.initializePanelColors() }\n  }\n\n  componentWillReceiveProps(props) {\n    if (props.isPlaying) {\n      this.setState({ panelColors: this.initializePanelColors() });\n    }\n  }\n\n  initializePanelColors() {\n    var panelColors = [];\n    for (var i = 0; i < 9; i++) {\n      panelColors.push(Math.random() >= 0.5);\n    }\n    return panelColors;\n  }\n\n  handleClick(i) {\n    if (this.props.isPlaying) {\n      const panelColors = this.state.panelColors.slice();\n      panelColors[i] = !this.state.panelColors[i];\n      this.setState({panelColors: panelColors});\n      if (panelColors.every(isBlack => isBlack)) {\n        this.props.endGame();\n      }\n    }\n  }\n\n  renderPanel(i) {\n    return <Panel \n      isBlack={this.state.panelColors[i]}\n      onClick={() => this.handleClick(i)} />;\n  }\n\n  render() {\n    return (\n      <div className=\"panel-list\">\n        <div>\n          {this.renderPanel(0)}\n          {this.renderPanel(1)}\n          {this.renderPanel(2)}\n        </div>\n        <div>\n          {this.renderPanel(3)}\n          {this.renderPanel(4)}\n          {this.renderPanel(5)}\n        </div>\n        <div>\n          {this.renderPanel(6)}\n          {this.renderPanel(7)}\n          {this.renderPanel(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PanelList;\n","import React, { Component } from 'react';\nimport PanelList from './components/PanelList/PanelList'\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { isPlaying: true }\n  }\n\n  endGame = () => {\n    this.setState({ isPlaying: false });\n  }\n\n  startGame = () => {\n    this.setState({ isPlaying: true });\n  }\n\n  render() {\n    const isPlaying = this.state.isPlaying;\n    return (\n      <div className=\"App\">\n\n        <header className=\"header\">\n          { isPlaying ? \n            <h1>ALL BLACKS</h1> :\n            <h1>Congrats! Haka!</h1>\n          }\n          <button onClick={() => this.startGame()}>Start</button>\n        </header>\n        <PanelList isPlaying={isPlaying} endGame={this.endGame}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}